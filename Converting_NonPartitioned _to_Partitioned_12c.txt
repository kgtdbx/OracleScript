--Converting a Non-Partitioned Table to a Partitioned Table oracle 12c

create table employees_convert
(employee_id number,
employee_name varchar2(100));

insert into employees_convert values(101,'abc');
insert into employees_convert values(302,'c');

alter table employees_convert
add constraint pk_employee_id primary key (employee_id)
using index;

create index ix_employee_name on employees_convert(employee_name);

ALTER TABLE employees_convert MODIFY
PARTITION BY RANGE(employee_id) INTERVAL (100)
( PARTITION P1 VALUES LESS THAN (100),
PARTITION P2 VALUES LESS THAN (200),
PARTITION P3 VALUES LESS THAN (300),
PARTITION P4 VALUES LESS THAN (400)
)
update indexes
(pk_employee_id local,
 ix_employee_name global partition by range(employee_name)
(partition ip1 values less than (MAXVALUE))
);


And all of that works only in 12.2. If you are on 12.1, you need to use DBMS_REDEFINITION. See here for an example 

https://asktom.oracle.com/pls/asktom/f?p=100:11:0::::P11_QUESTION_ID:869096700346654484 



----
more variants https://oracle-base.com/articles/12c/online-conversion-of-a-non-partitioned-table-to-a-partitioned-table-12cr2
https://blog.dbi-services.com/oracle-12cr2-partitioning-improvements-online-conversion-of-a-non-partitioned-table-to-a-partitioned-table/

----

Convert non partitioned table to partitioned online Oracle 12.2
/ORACLE 12C / ORACLE 12CR2 / Convert non partitioned table to partitioned online Oracle 12.2
 July 19, 2017  Skant Gupta  ORACLE 12CR2
This is one of the new feature of oracle 12.2 release .

Non-partitioned tables can be converted to partitioned table online without any downtime to the application , i.e no impact to the DML activities.

Till now for this activity, we were using dbms_redef methods. But in Oracle 12.2 release this has been simplified much.

See the below example:

1. Identify the non partitioned table.


SQL> desc BSSTDBA.ORDER_TAB
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 ROW_ID                                    NOT NULL VARCHAR2(15 CHAR)
 CREATED                                   NOT NULL DATE
 CREATED_BY                                NOT NULL VARCHAR2(15 CHAR)
 LAST_UPD                                  NOT NULL DATE
 MODIFICATION_NUM                          NOT NULL NUMBER(10)
 CONFLICT_ID                               NOT NULL VARCHAR2(15 CHAR)
 ALW_PART_SHIP_FLG                         NOT NULL CHAR(1 CHAR)
 
SQL> col owner for a13
SQL> col table_name for a14
SQL>  set lines 299
SQL> select owner,table_name,partitioned from dba_tables where table_name='ORDER_TAB';
 
OWNER         TABLE_NAME     PAR
------------- -------------- ---
BSSTDBA       ORDER_TAB      NO
 
SQL> select count(*) from BSSTDBA.ORDER_TAB;
 
  COUNT(*)
----------
    954598
 
SQL> SQL> create index BSSTDBA.ORDER_TAB_IND1 on BSSTDBA.ORDER_TAB(row_id);
 
Index created.
 
SQL> SQL> create index BSSTDBA.ORDER_TAB_IND2 on BSSTDBA.ORDER_TAB(created);

SQL> desc BSSTDBA.ORDER_TAB
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 ROW_ID                                    NOT NULL VARCHAR2(15 CHAR)
 CREATED                                   NOT NULL DATE
 CREATED_BY                                NOT NULL VARCHAR2(15 CHAR)
 LAST_UPD                                  NOT NULL DATE
 MODIFICATION_NUM                          NOT NULL NUMBER(10)
 CONFLICT_ID                               NOT NULL VARCHAR2(15 CHAR)
 ALW_PART_SHIP_FLG                         NOT NULL CHAR(1 CHAR)
 
SQL> col owner for a13
SQL> col table_name for a14
SQL>  set lines 299
SQL> select owner,table_name,partitioned from dba_tables where table_name='ORDER_TAB';
 
OWNER         TABLE_NAME     PAR
------------- -------------- ---
BSSTDBA       ORDER_TAB      NO
 
SQL> select count(*) from BSSTDBA.ORDER_TAB;
 
  COUNT(*)
----------
    954598
 
SQL> SQL> create index BSSTDBA.ORDER_TAB_IND1 on BSSTDBA.ORDER_TAB(row_id);
 
 
Index created.
 
SQL> SQL> create index BSSTDBA.ORDER_TAB_IND2 on BSSTDBA.ORDER_TAB(created);
2. Alter table modify to partition the table.( partition key is column CREATED )

alter table BSSTDBA.ORDER_TAB modify
PARTITION BY RANGE (CREATED)
(partition created_2105_p8 VALUES LESS THAN (TO_DATE('01/09/2015', 'DD/MM/YYYY')),
partition created_2105_p9 VALUES LESS THAN (TO_DATE('01/10/2015', 'DD/MM/YYYY')),
partition created_2105_p10 VALUES LESS THAN (TO_DATE('01/11/2015', 'DD/MM/YYYY')),
partition created_2105_p11 VALUES LESS THAN (TO_DATE('01/12/2015', 'DD/MM/YYYY')),
partition created_2105_p12 VALUES LESS THAN (TO_DATE('01/01/2016', 'DD/MM/YYYY')),
PARTITION Created_MX VALUES LESS THAN (MAXVALUE)) ONLINE;
This activity will take some time depending upon amount of data table has.

While this alter statement is running, I have started running DML activities on the same table, To check whether it is impacting the DML activities.

SESSION 2:

insert into BSSTDBA.ORDER_TAB select * from BSSTDBA.ORDER_TAB;

Lets check for blocking session:


       SID USERNAME             MODULE                         STATUS   EVENT                          BLOCKING_SESSION
---------- -------------------- ------------------------------ -------- ------------------------------ ----------------
       490 SYS                  sqlplus@bttstdev64 (TNS V1-V3) ACTIVE   enq: TX - row lock contention                 7
 
 
SID      > 490    
SQL_TEXT > alter table BSSTDBA.ORDER_TAB modify PARTITION BY RANGE (CREATE
        D) (partition created_2105_p8 VALUES LESS THAN (TO_DATE('01/09/2
        015', 'DD/MM/YYYY')), partition created_2105_p9 VALUES LESS THAN
        (TO_DATE('01/10/2015', 'DD/MM/YYYY')), partition created_2105_p
        10 VALUES LESS THAN (TO_DATE('01/11/2015', 'DD/MM/YYYY')), parti
        tion created_2105_p11 VALUES LESS THAN (TO_DATE('01/12/2015', 'D
        D/MM/YYYY')), partition created_2105_p12 VALUES LESS THAN (TO_DA
        TE('01/01/2016', 'DD/MM/YYYY')), partition created_2016_p1 VALUE
        THAN (MAXVALUE)) ONLINE
 
 
SID    >  7 
SQL_TEXT> insert into BSSTDBA.ORDER_TAB select * from BSSTDBA.ORDER_TAB;

       SID USERNAME             MODULE                         STATUS   EVENT                          BLOCKING_SESSION
---------- -------------------- ------------------------------ -------- ------------------------------ ----------------
       490 SYS                  sqlplus@bttstdev64 (TNS V1-V3) ACTIVE   enq: TX - row lock contention                 7
 
 
SID      > 490    
SQL_TEXT > alter table BSSTDBA.ORDER_TAB modify PARTITION BY RANGE (CREATE
        D) (partition created_2105_p8 VALUES LESS THAN (TO_DATE('01/09/2
        015', 'DD/MM/YYYY')), partition created_2105_p9 VALUES LESS THAN
        (TO_DATE('01/10/2015', 'DD/MM/YYYY')), partition created_2105_p
        10 VALUES LESS THAN (TO_DATE('01/11/2015', 'DD/MM/YYYY')), parti
        tion created_2105_p11 VALUES LESS THAN (TO_DATE('01/12/2015', 'D
        D/MM/YYYY')), partition created_2105_p12 VALUES LESS THAN (TO_DA
        TE('01/01/2016', 'DD/MM/YYYY')), partition created_2016_p1 VALUE
        THAN (MAXVALUE)) ONLINE
 
 
SID    >  7 
SQL_TEXT> insert into BSSTDBA.ORDER_TAB select * from BSSTDBA.ORDER_TAB;
We can see that the insert statement(SID 7), is blocking the alter table command(SID 490), not the other way around. It means during this partition conversion activity, if any DML requests are coming, then it will allow them to complete their request. This may slow down the partition conversion time, But it won’t impact the application. Once ALTER TABLE MODIFY is completed. Check the whether table was partitioned properly or not.


SQL> select partition_name,high_value from dba_tab_partitions where table_name='ORDER_TAB';
 
 
PARTITION_NAME          HIGH_VALUE
----------------------- --------------------------------------------------------------------------------
CREATED_2105_P10        TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
CREATED_2105_P11        TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
CREATED_2105_P12        TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
CREATED_2105_P8         TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
CREATED_2105_P9         TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
CREATED_MX              MAXVALUE
 
20 rows selected.

SQL> select partition_name,high_value from dba_tab_partitions where table_name='ORDER_TAB';
 
 
PARTITION_NAME          HIGH_VALUE
----------------------- --------------------------------------------------------------------------------
CREATED_2105_P10        TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
CREATED_2105_P11        TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
CREATED_2105_P12        TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
CREATED_2105_P8         TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
CREATED_2105_P9         TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
CREATED_MX              MAXVALUE
 
20 rows selected.
But what happened to the INDEXES:


select  index_name,PARTITIONED from dba_indexes where table_name='ORDER_TAB';
 
INDEX_NAME          PARTITIONED     
------------------- ------------ 
ORDER_TAB_IND1      NO         
ORDER_TAB_IND2      YES

select  index_name,PARTITIONED from dba_indexes where table_name='ORDER_TAB';
 
INDEX_NAME          PARTITIONED     
------------------- ------------ 
ORDER_TAB_IND1      NO         
ORDER_TAB_IND2      YES
We can see ORDER_TAB_IND1 was NON partitioned, But ORDER_TAB_IND2 was partitioned.

Oracle document Says:

If no index clause is mentioned in the alter table statement, then
nonprefixed indexes(i.e index column is not a partitioned key) will be become global non-partitioned Index.
prefixed indexes(i.e index column is a partitioned key) will become local partitioned Index.


ORDER_TAB_IND1 - 
-------------------
 
INDEX_SQL - >  create index BSSTDBA.ORDER_TAB_IND1 on BSSTDBA.ORDER_TAB(row_id);
It is an nonprefixed Index i.e index column is not a partitioned key. So it became global non partitioned Index
 
ORDER_TAB_IND2  -
--------------------
 
create index BSSTDBA.ORDER_TAB_IND2 on BSSTDBA.ORDER_TAB(created);
It is an prefixed Index.  i.e index column in a partitione key .
So this indexes became local partitioned Index.

ORDER_TAB_IND1 - 
-------------------
 
INDEX_SQL - >  create index BSSTDBA.ORDER_TAB_IND1 on BSSTDBA.ORDER_TAB(row_id);
It is an nonprefixed Index i.e index column is not a partitioned key. So it became global non partitioned Index
 
ORDER_TAB_IND2  -
--------------------
 
create index BSSTDBA.ORDER_TAB_IND2 on BSSTDBA.ORDER_TAB(created);
It is an prefixed Index.  i.e index column in a partitione key .
So this indexes became local partitioned Index.

SQL> select index_name,PARTITION_NAME,HIGH_VALUE from dba_ind_partitions where index_name='ORDER_TAB_IND2';
 
 
INDEX_NAME          PARTITION_NAME          HIGH_VALUE
------------------- ----------------------- --------------------------------------------------------------------------------
ORDER_TAB_IND2      CREATED_2016_P9         TO_DATE(' 2016-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
ORDER_TAB_IND2      CREATED_2105_P10        TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
ORDER_TAB_IND2      CREATED_2105_P11        TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
ORDER_TAB_IND2      CREATED_2105_P12        TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
ORDER_TAB_IND2      CREATED_2105_P8         TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
ORDER_TAB_IND2      CREATED_2105_P9         TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
ORDER_TAB_IND2      CREATED_MX              MAXVALUE
 
20 rows selected.

SQL> select index_name,PARTITION_NAME,HIGH_VALUE from dba_ind_partitions where index_name='ORDER_TAB_IND2';
 
 
INDEX_NAME          PARTITION_NAME          HIGH_VALUE
------------------- ----------------------- --------------------------------------------------------------------------------
ORDER_TAB_IND2      CREATED_2016_P9         TO_DATE(' 2016-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
ORDER_TAB_IND2      CREATED_2105_P10        TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
ORDER_TAB_IND2      CREATED_2105_P11        TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
ORDER_TAB_IND2      CREATED_2105_P12        TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
ORDER_TAB_IND2      CREATED_2105_P8         TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
ORDER_TAB_IND2      CREATED_2105_P9         TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIA
ORDER_TAB_IND2      CREATED_MX              MAXVALUE
 
20 rows selected.
There are lot of 12.2 New features like moving a table online, Spliting a partitioned table online etc. which we will discuss very soon.

----------------------
----------------11g variant----------------------
--1. Drop nonpartitioned temp table
DROP TABLE stg_strutur_v_writoff_g_arc_t PURGE;


--2. Create temp table with needed ACCOUNT_NO datatype and partitioned  
CREATE TABLE STG_STRUTUR_V_WRITOFF_G_ARC_T
TABLESPACE "STAGING" 
  PARTITION BY RANGE ("REFERENCE_DATE") INTERVAL (NUMTOYMINTERVAL(1, 'MONTH')) 
 (PARTITION "OLD"  VALUES LESS THAN (TO_DATE(' 2000-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 0 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 COMPRESS BASIC LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ARCHIVE" )
PARALLEL (DEGREE 4) 
AS 
SELECT
ID
,LIABILITY_ID
,DEBTOR_SSN
,LIABILITY_TYPE
,BRANCH
,LEDGER
,CAST(ACCOUNT_NO AS VARCHAR2(40)) AS ACCOUNT_NO
,LIABILITY_DESCRIPTION
,REGISTRATION_DATE
,WRITEOFF_DATE
,STATUS
,WRITEOFF_REASON
,WRITEOFF_TYPE
,AMOUNT
,LEGAL_COST
,OTHER_COST
,FROZEN_COST
,ACCOUNT_BALANCE
,TOTAL_DEPOSITS
,LAST_DEPOSIT_DATE
,BALANCE
,BALANCE_STATUS
,LAWYER_SSN
,LAWYER_NAME
,SHORT_WRITEOFF_REASON
,WRITEOFF_REASON_NUMBER
,LAWYER_NUMBER
,WRITEOFF_TYPE_NUMBER
,LOAD_ID
,LOAD_DATE
,REFERENCE_DATE
,CUSTOMER_RESPONSIBILITY
FROM STG_STRUTUR_V_WRITOFF_GLOB_ARC;


--2.1 Check if table was copied well
select count(*) 
from STG_STRUTUR_V_WRITOFF_G_ARC_T;

--3. Rename original table to another one(to save the data if anything will going wrong )
RENAME STG_STRUTUR_V_WRITOFF_GLOB_ARC TO STG_STRUTUR_V_WRITOFF_G_ARC_O;

--4. Drop index IX_STG_STRUT_WRTOFF_GLOB_ARC_1
DROP INDEX IX_STG_STRUT_WRTOFF_GLOB_ARC_1;


--5. Rename temp table to original one
RENAME STG_STRUTUR_V_WRITOFF_G_ARC_T TO STG_STRUTUR_V_WRITOFF_GLOB_ARC;


--6. Create index
ALTER SESSION ENABLE PARALLEL DDL;
CREATE INDEX BIFROST.IX_STG_STRUT_WRTOFF_GLOB_ARC_1 ON BIFROST.STG_STRUTUR_V_WRITOFF_GLOB_ARC (REFERENCE_DATE) LOCAL
TABLESPACE STAGING
COMPRESS 1
PARALLEL 4;
ALTER INDEX BIFROST.IX_STG_DEP_EV_ARC_AI_RD NOPARALLEL;
ALTER SESSION DISABLE PARALLEL DDL;

  
--7. Drop temporary tables
DROP TABLE STG_STRUTUR_V_WRITOFF_G_ARC_T PURGE;
DROP TABLE STG_STRUTUR_V_WRITOFF_G_ARC_O PURGE;


----------------------------------------------------------------------------------
--1.1 Check count current table
select count(*)
from DEPOSITS.PRT_EV_EVENTS;
/*
  COUNT(*)
----------
 250570875
*/

--1.2. Drop indexes (save in case if you do not have create stmt)
DROP INDEX deposits.i0_prt_ev_events;
DROP INDEX deposits.i1_prt_ev_events;


--1.3. Copy constraints
column text format a80 word_wrapped;
select dbms_metadata.get_dependent_ddl( 'REF_CONSTRAINT', 'PRT_EV_EVENTS' ) text  from dual;

select 'select dbms_metadata.get_ddl(''CONSTRAINT'','''||a.constraint_name||''') ddl from dual;'
from
user_constraints a
where a.table_name='PRT_EV_EVENTS';

--select dbms_metadata.get_ddl('CONSTRAINT','SYS_C00370021') ddl from dual;
--select dbms_metadata.get_ddl('CONSTRAINT','SYS_C00370022') ddl from dual;

--ALTER TABLE "DEPOSITS"."PRT_EV_EVENTS" MODIFY ("EVENT_DTTM" NOT NULL ENABLE); 
--ALTER TABLE "DEPOSITS"."PRT_EV_EVENTS" MODIFY ("VALUE_DT" NOT NULL ENABLE);


--1.4. Drop constraints
ALTER TABLE deposits.prt_ev_events MODIFY event_dttm NULL;
ALTER TABLE deposits.prt_ev_events MODIFY value_dt NULL;
--or
--ALTER TABLE deposits.prt_ev_events DROP CONSTRAINT prt_ev_events_PK;
--ALTER TABLE deposits.prt_ev_events DROP CONSTRAINT prt_ev_events_FK;


--2. Rename table
ALTER TABLE DEPOSITS.PRT_EV_EVENTS RENAME TO PRT_EV_EVENTS_OLD;

--2.1 Check count

select count(*)
from DEPOSITS.PRT_EV_EVENTS_OLD;


ALTER USER serhiib QUOTA UNLIMITED ON ARCHIVE; 

GRANT UNLIMITED TABLESPACE TO serhiib;

--3. Create temp table with needed datatypes and partitioned  
CREATE TABLE DEPOSITS.PRT_EV_EVENTS
(HOST_EVENT_NUM
,EVENT_TYPE_CD
,EVENT_SUBTYPE_CD
,ACTIVITY_TYPE_CD
,ACTIVITY_SUBTYPE_CD
,HOST_TRANSACTION_TYPE_NUM
,HOST_EVENT_GROUP_NUM
,CATEGORY_CODE_NUM
,CATEGORY_CODE_DESC
,REFERENCE_NUM
,REFERENCE_TXT
,EXTENDED_TXT
,EXTERNAL_TXT
,HOST_TELLER_NUM
,GENERAL_LEDGER_NUM
,VOID_IND
,ATM_NUM
,CHANNEL_TYPE_CD
,CURRENCY_CD
,EVENT_AC_AMT
,EVENT_AMT
,AGREEMENT_BALANCE_AC_AMT
,EVENT_DTTM
,REFERENCE_DATE
,VALUE_DT
,ENTITY_CD
,TRANSACTION_ENTITY_CD
,AGREEMENT_ID
,HOST_AGREEMENT_NUM
,OWNER_SSN
,OWNER_PARTY_ID
,COUNTERPARTY_SSN
,COUNTERPARTY_PARTY_ID
,COUNTERPARTY_HOST_AGR_NUM
,COUNTERPARTY_AGREEMENT_ID
,ORDERER_PARTY_ID
,ORDERER_SSN
,BENEFICIARY_PARTY_ID
,BENEFICIARY_SSN
,ORDERER_CROSS_RT
,BENEFICIARY_CROSS_RT
,HOST_MERCHANT_AGREEMENT_NUM
,MERCHANT_PARTY_ID
,MERCHANT_SSN
,MERCHANT_NAME
,MERCHANT_CATEGORY_CD
,CARD_NUMBER_MASKED
,HOST_AUTHORIZATION_NUM
,HOST_BATCH_NUMBER
,HOST_TRANSACTION_CD
,OPERATION_REFERENCE_TXT
   ) PCTFREE 2 PCTUSED 40 INITRANS 1 MAXTRANS 255 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
TABLESPACE "GAGNATORG" 
  PARTITION BY RANGE ("REFERENCE_DATE") INTERVAL (NUMTODSINTERVAL(1,'DAY')) 
 (PARTITION "OLD"  VALUES LESS THAN (TO_DATE(' 2000-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 0 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 COMPRESS BASIC LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "GAGNATORG" )
PARALLEL (DEGREE 4) 
AS 
SELECT
  cast(HOST_EVENT_NUM               AS VARCHAR2(50 BYTE)    )  AS  HOST_EVENT_NUM
, cast(EVENT_TYPE_CD                AS VARCHAR2(50 BYTE)    )  AS  EVENT_TYPE_CD
, cast(EVENT_SUBTYPE_CD             AS VARCHAR2(50 BYTE)    )  AS  EVENT_SUBTYPE_CD
, cast(ACTIVITY_TYPE_CD             AS VARCHAR2(50 BYTE)    )  AS  ACTIVITY_TYPE_CD
, cast(ACTIVITY_SUBTYPE_CD          AS VARCHAR2(50 BYTE)    )  AS  ACTIVITY_SUBTYPE_CD
, cast(HOST_TRANSACTION_TYPE_NUM    AS VARCHAR2(50 BYTE)    )  AS  HOST_TRANSACTION_TYPE_NUM
, cast(HOST_EVENT_GROUP_NUM         AS VARCHAR2(50 BYTE)    )  AS  HOST_EVENT_GROUP_NUM
, cast(CATEGORY_CODE_NUM            AS VARCHAR2(2 BYTE)     )  AS  CATEGORY_CODE_NUM
, cast(CATEGORY_CODE_DESC           AS VARCHAR2(50 BYTE)    )  AS  CATEGORY_CODE_DESC
, cast(REFERENCE_NUM                AS VARCHAR2(7 BYTE)     )  AS  REFERENCE_NUM
, cast(REFERENCE_TXT                AS VARCHAR2(16 BYTE)    )  AS  REFERENCE_TXT
, cast(EXTENDED_TXT                 AS VARCHAR2(140 BYTE)   )  AS  EXTENDED_TXT
, cast(EXTERNAL_TXT                 AS VARCHAR2(35 BYTE)    )  AS  EXTERNAL_TXT
, cast(HOST_TELLER_NUM              AS VARCHAR2(4 BYTE)     )  AS  HOST_TELLER_NUM
, cast(GENERAL_LEDGER_NUM           AS VARCHAR2(2 BYTE)     )  AS  GENERAL_LEDGER_NUM
, cast(VOID_IND                     AS VARCHAR2(3 BYTE)     )  AS  VOID_IND
, cast(ATM_NUM                      AS VARCHAR2(50 BYTE)    )  AS  ATM_NUM
, cast(CHANNEL_TYPE_CD              AS VARCHAR2(50 BYTE)    )  AS  CHANNEL_TYPE_CD
, cast(CURRENCY_CD                  AS VARCHAR2(3 BYTE)     )  AS  CURRENCY_CD
, cast(EVENT_AC_AMT                 AS NUMBER(30,15)        )  AS  EVENT_AC_AMT
, cast(EVENT_AMT                    AS NUMBER(30,15)        )  AS  EVENT_AMT
, cast(AGREEMENT_BALANCE_AC_AMT     AS NUMBER(30,15)        )  AS  AGREEMENT_BALANCE_AC_AMT
, cast(EVENT_DTTM                   AS TIMESTAMP (6)        )  AS  EVENT_DTTM
, cast(REFERENCE_DATE               AS DATE                 )  AS  REFERENCE_DATE
, cast(VALUE_DT                     AS DATE                 )  AS  VALUE_DT
, cast(ENTITY_CD                    AS VARCHAR2(5 BYTE)     )  AS  ENTITY_CD
, cast(TRANSACTION_ENTITY_CD        AS VARCHAR2(5 BYTE)     )  AS  TRANSACTION_ENTITY_CD
, cast(AGREEMENT_ID                 AS NUMBER(38,0)         )  AS  AGREEMENT_ID
, cast(HOST_AGREEMENT_NUM           AS VARCHAR2(50 BYTE)    )  AS  HOST_AGREEMENT_NUM
, cast(OWNER_SSN                    AS VARCHAR2(10 BYTE)    )  AS  OWNER_SSN
, cast(OWNER_PARTY_ID               AS VARCHAR2(10 BYTE)    )  AS  OWNER_PARTY_ID
, cast(COUNTERPARTY_SSN             AS VARCHAR2(10 BYTE)    )  AS  COUNTERPARTY_SSN
, cast(COUNTERPARTY_PARTY_ID        AS VARCHAR2(10 BYTE)    )  AS  COUNTERPARTY_PARTY_ID
, cast(COUNTERPARTY_HOST_AGR_NUM    AS VARCHAR2(50 BYTE)    )  AS  COUNTERPARTY_HOST_AGR_NUM
, cast(COUNTERPARTY_AGREEMENT_ID    AS NUMBER(38,0)         )  AS  COUNTERPARTY_AGREEMENT_ID
, cast(ORDERER_PARTY_ID             AS VARCHAR2(10 BYTE)    )  AS  ORDERER_PARTY_ID
, cast(ORDERER_SSN                  AS VARCHAR2(10 BYTE)    )  AS  ORDERER_SSN
, cast(BENEFICIARY_PARTY_ID         AS VARCHAR2(10 BYTE)    )  AS  BENEFICIARY_PARTY_ID
, cast(BENEFICIARY_SSN              AS VARCHAR2(10 BYTE)    )  AS  BENEFICIARY_SSN
, cast(ORDERER_CROSS_RT             AS NUMBER(30,15)        )  AS  ORDERER_CROSS_RT
, cast(BENEFICIARY_CROSS_RT         AS NUMBER(30,15)        )  AS  BENEFICIARY_CROSS_RT
, cast(HOST_MERCHANT_AGREEMENT_NUM  AS VARCHAR2(50 BYTE)    )  AS  HOST_MERCHANT_AGREEMENT_NUM
, cast(MERCHANT_PARTY_ID            AS VARCHAR2(10 BYTE)    )  AS  MERCHANT_PARTY_ID
, cast(MERCHANT_SSN                 AS VARCHAR2(10 BYTE)    )  AS  MERCHANT_SSN	
, cast(MERCHANT_NAME                AS VARCHAR2(100 BYTE)   )  AS  MERCHANT_NAME
, cast(MERCHANT_CATEGORY_CD         AS VARCHAR2(4 BYTE)     )  AS  MERCHANT_CATEGORY_CD
, cast(CARD_NUMBER_MASKED           AS VARCHAR2(50 BYTE)    )  AS  CARD_NUMBER_MASKED
, cast(HOST_AUTHORIZATION_NUM       AS VARCHAR2(50 BYTE)    )  AS  HOST_AUTHORIZATION_NUM
, cast(HOST_BATCH_NUMBER            AS VARCHAR2(4 BYTE)     )  AS  HOST_BATCH_NUMBER
, cast(HOST_TRANSACTION_CD          AS VARCHAR2(2 BYTE)     )  AS  HOST_TRANSACTION_CD
, cast(OPERATION_REFERENCE_TXT      AS VARCHAR2(16 CHAR)    )  AS  OPERATION_REFERENCE_TXT
FROM DEPOSITS.PRT_EV_EVENTS_OLD;

--4. Create constraints

ALTER TABLE deposits.prt_ev_events MODIFY event_dttm NOT NULL;

ALTER TABLE deposits.prt_ev_events MODIFY value_dt NOT NULL;

--5. Create indexes
 
ALTER SESSION ENABLE PARALLEL DDL;

CREATE INDEX deposits.i0_prt_ev_events on deposits.prt_ev_events (reference_date, agreement_id) LOCAL
PARALLEL 4 
COMPUTE STATISTICS;

CREATE INDEX deposits.i1_prt_ev_events on deposits.prt_ev_events (reference_date, host_agreement_num) LOCAL 
PARALLEL 4 
COMPUTE STATISTICS;

ALTER INDEX deposits.i0_prt_ev_events NOPARALLEL;

ALTER INDEX deposits.i1_prt_ev_events NOPARALLEL;

ALTER SESSION DISABLE PARALLEL DDL;

--6. Do grants
GRANT SELECT ON deposits.prt_ev_events TO deposits_all_obj_reader;

GRANT SELECT ON deposits.prt_ev_events TO dw_admin_role;

--7. Gather statistic
set timing on
set serveroutput on
begin
 dbms_stats.gather_table_stats(ownname             =>'DEPOSITS', 
                               tabname             =>'PRT_EV_EVENTS', 
                               method_opt          =>'FOR ALL COLUMNS SIZE 1', 
                               degree              =>4, 
                               cascade             =>dbms_stats.auto_cascade, 
                               estimate_percent    =>DBMS_STATS.AUTO_SAMPLE_SIZE
                               );
end;
/


--8. Check if table was copied well
select count(*) 
from deposits.prt_ev_events;

  
--9. Drop temporary tables
DROP TABLE deposits.prt_ev_events_old PURGE;




----------------------------------------------------


