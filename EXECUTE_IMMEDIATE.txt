set serveroutput on
declare
procedure alter_mview_copmile(ip_owner varchar2, ip_test_only boolean default true)
is
l_stmp varchar2(500);
begin
for cur in (select mview_name from all_mviews where owner = ip_owner)
loop
l_stmp :='alter materialized view '||cur.mview_name||' compile';
    begin
    if ip_test_only
    then
        dbms_output.put_line(l_stmp);
    else 
        execute immediate l_stmp;
    end if;
    exception 
        when others 
            then raise;
    end;
end loop;
end alter_mview_copmile;

begin
alter_mview_copmile('DEPOSITS');
end;
/

---------

BEGIN
    EXECUTE IMMEDIATE 'CREATE SEQUENCE S_TEST START WITH 1 INCREMENT BY 1';
EXCEPTION
    WHEN OTHERS THEN
      IF SQLCODE = -955 THEN
        NULL; -- suppresses ORA-00955 exception
      ELSE
         RAISE;
      END IF;
END; 

----------
execute immediate 'begin :out_val := ' || gv_process.pkg_name||'.'||l_operation.check_empty||'; end;'
                using out l_chk_empty;
------------				
execute immediate 'begin '||gv_process.pkg_name||'.'||l_operation.procedure_name||'; end;';

--------------

begin
    if gv_process.save_state_proc is not null then
      execute immediate 'begin '||
                           gv_process.pkg_name||'.'||gv_process.save_state_proc||'(:p_curr_operation_cd,:p_curr_row_num);
                         end;'
        using ip_curr_operation_cd, ip_curr_row_num;
    end if;
  end;				
  
  

 CREATE OR REPLACE FUNCTION quote( 
in_v1 IN varchar2 
) 
RETURN varchar2 IS 
BEGIN 
return chr(39) || in_v1 || chr(39); 
--return replace(dbms_assert.enquote_name(in_v1),'"',chr(39)); 
END; 
/ 

-----
The syntax for the Oracle EXECUTE IMMEDIATE statement as follows:

EXECUTE IMMEDIATE <SQL or SPL Commands>
  [INTO <variable list>]
  [USING <bind variable list>];
Quotes and execute immediate
When executing a string variable that contains quotes it is important to "escape" the quote marks.

On 10g and beyond you can "escape" the quotes with two single quotes or a "q" and curly brackets:

For example, this "execute immediate" escapes the quotes with a q'{xxxxxxxx}'
sqlstring := q'{insert into x values( ' || i || ')}';

execute immediate sqlstring;


CREATE PROCEDURE fire_employee (emp_id NUMBER) AS
BEGIN
   EXECUTE IMMEDIATE
      'DELETE FROM employees WHERE employee_id = :id' USING emp_id;
END;
/

----------
SET SERVEROUTPUT ON
DECLARE
    -- constants
    c_enter   constant varchar2(2) := chr(13)||chr(10);
    c_quote   constant varchar2(2) := chr(39);

    TYPE flag_tt IS TABLE OF VARCHAR2(1 CHAR) INDEX BY PLS_INTEGER;
    l_flag flag_tt;
    l_date varchar2(30) := to_char(bifrost.dagar.bankadagur_nidur(SYSDATE - 1),'dd.mm.yyyy');
    l_stmt varchar2(250);
    CURSOR mview_cur (filter_in IN VARCHAR2) 
        IS 
        SELECT mview_name
          FROM all_mviews am
         WHERE am.owner = filter_in;   
   
BEGIN  
   FOR rec IN mview_cur ('DEPOSITS') 
   LOOP  
   l_stmt := 'SELECT /*+ FIRST_ROWS(1) */ ''T'' n
                        FROM  '|| rec.mview_name||
                     ' WHERE  1=1
                         AND  to_char(reference_date, ''dd.mm.yyyy'') = '||c_quote||l_date||c_quote||
                     '   AND  ROWNUM < 2';
   
   EXECUTE IMMEDIATE l_stmt BULK COLLECT INTO l_flag;  
   --DBMS_OUTPUT.put_line (l_stmt);
   DBMS_OUTPUT.put_line (rec.mview_name||' - '||l_flag.COUNT);
   END LOOP;  
END;
/

--
SET SERVEROUTPUT ON
DECLARE
    -- constants
    c_enter   constant varchar2(2) := chr(13)||chr(10);
    c_quote   constant varchar2(2) := chr(39);

    TYPE flag_tt IS TABLE OF VARCHAR2(1 CHAR) INDEX BY PLS_INTEGER;
    l_flag flag_tt;
    l_date varchar2(30) := bifrost.dagar.bankadagur_nidur(SYSDATE - 1);
    l_stmt varchar2(250);
    CURSOR mview_cur (filter_in IN VARCHAR2) 
        IS 
        SELECT mview_name
          FROM all_mviews am
         WHERE am.owner = filter_in;   
   
BEGIN  
   FOR rec IN mview_cur ('DEPOSITS') 
   LOOP  
   l_stmt := 'SELECT /*+ FIRST_ROWS(1) */ ''T'' n
                        FROM  '|| rec.mview_name||
                     ' WHERE  1=1
                         AND  reference_date = :l_date
                         AND  ROWNUM < 2';
   
   EXECUTE IMMEDIATE l_stmt BULK COLLECT INTO l_flag USING l_date;  
   --DBMS_OUTPUT.put_line (l_stmt);
   DBMS_OUTPUT.put_line (rec.mview_name||' - '||l_flag.COUNT);
   END LOOP;  
END;
/
-----------
CREATE OR REPLACE PROCEDURE dept_query (
    p_deptno        emp.deptno%TYPE,
    p_sal           emp.sal%TYPE
)
IS
    emp_refcur      SYS_REFCURSOR;
    v_empno         emp.empno%TYPE;
    v_ename         emp.ename%TYPE;
    p_query_string  VARCHAR2(100);
BEGIN
    p_query_string := 'SELECT empno, ename FROM emp WHERE ' ||
        'deptno = :dept AND sal >= :sal';
    OPEN emp_refcur FOR p_query_string USING p_deptno, p_sal;
    DBMS_OUTPUT.PUT_LINE('EMPNO    ENAME');
    DBMS_OUTPUT.PUT_LINE('-----    -------');
    LOOP
        FETCH emp_refcur INTO v_empno, v_ename;
        EXIT WHEN emp_refcur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_empno || '     ' || v_ename);
    END LOOP;
    CLOSE emp_refcur;
END;
-----------
