/*
The benefits of the NOLOGGING option are:

Will save disk space when the archive option is enabled.
Will largely reduce I/O on the redologs.
Will reduce the time it takes to complete the operation.

Use the NOLOGGING option only on temporary/working/staging tables.
Always perform a backup after a NOLOGGING operation.
Unless explicitly indicated, DDLs like CTAS and DMLs like inserts will log all operations.

--------
append и nologging - лошади разных цветов.

Если вы в archivelog - то append не генерирует undo, но генерирует redo, если только на сегменте нет nologging и база не в режиме force logging.

Если вы в noarchivelog - то append не генерирует undo и не генерирует redo.

Главная цель append - это direct path, т.е. писать напрямую выше HWM, минуя buffer cache. Наличие/отсутсвие redo - это уже "побочный фактор".

P.S. Наличие индексов может менять картину.
*/

NOLOGGING can be used to minimize the amount of redo generated by Oracle. Only the following operations can make use of nologging:

* SQL*Loader in direct mode
* INSERT /*+APPEND*/ ...
* CTAS
* ALTER TABLE statements (move/add/split/merge partitions)
* CREATE INDEX
* ALTER INDEX statements (move/add/split/merge partitions) 

---#######################
select force_logging,log_mode from v$database;

drop table tr purge;
declare
    l_after_redo   number;
    l_before_redo  number;
begin
    select v$mystat.value into l_before_redo
      from v$mystat, v$statname
     where v$mystat.statistic# = v$statname.statistic#
       and v$statname.name = 'redo size';

    execute immediate 'create table tr as select * from all_objects';
    -- execute immediate 'create table tr as select * from all_objects nologging'; 

    select v$mystat.value into l_after_redo
      from v$mystat, v$statname
     where v$mystat.statistic# = v$statname.statistic#
       and v$statname.name = 'redo size';

    dbms_output.put_line
    ( '1.Generated LOG' || 
       to_char(l_after_redo-l_before_redo,'999,999,999,999') ||
      ' bytes of redo' );
    dbms_output.new_line;
end;
/

select table_name,degree,logging from user_tables where table_name='TR';

---
drop table tr purge;

declare
    l_after_redo   number;
    l_before_redo  number;
begin
    select v$mystat.value into l_before_redo
      from v$mystat, v$statname
     where v$mystat.statistic# = v$statname.statistic#
       and v$statname.name = 'redo size';

    execute immediate 'create table tr nologging as select * from all_objects';

    select v$mystat.value into l_after_redo
      from v$mystat, v$statname
     where v$mystat.statistic# = v$statname.statistic#
       and v$statname.name = 'redo size';

    dbms_output.put_line
    ( '2.Generated NOLOG' || 
       to_char(l_after_redo-l_before_redo,'999,999,999,999') ||
      ' bytes of redo' );
    dbms_output.new_line;
end;
/
select table_name,degree,logging from user_tables where table_name='TR';

---
drop table tr purge;

declare
    l_after_redo   number;
    l_before_redo  number;
begin
    select v$mystat.value into l_before_redo
      from v$mystat, v$statname
     where v$mystat.statistic# = v$statname.statistic#
       and v$statname.name = 'redo size';

    execute immediate 'create table tr  nologging as select * from all_objects where 1=2';
    execute immediate 'insert /*+ append */ into tr  select * from all_objects';

    select v$mystat.value into l_after_redo
      from v$mystat, v$statname
     where v$mystat.statistic# = v$statname.statistic#
       and v$statname.name = 'redo size';

    dbms_output.put_line
    ( '3.Generated NOLOG + INS APPEND' || 
       to_char(l_after_redo-l_before_redo,'999,999,999,999') ||
      ' bytes of redo' );
    dbms_output.new_line;
end;
/

select table_name,degree,logging from user_tables where table_name='TR';
drop table tr purge;
SQL> select force_logging, log_mode from v$database;
FOR LOG_MODE
--- ------------
NO  ARCHIVELOG

/*
1.Generated  LOG              7,277,084 bytes of redo

TABLE_NAME                     DEGREE     LOG
------------------------------ ---------- ---
TR                                      1 YES


2.Generated NOLOG               163,372 bytes of redo

TABLE_NAME                     DEGREE     LOG
------------------------------ ---------- ---
TR                                      1 NO

3.Generated NOLOG + INS APPEND   221,532 bytes of redo

TABLE_NAME                     DEGREE     LOG
------------------------------ ---------- ---
TR                                      1 NO
*/