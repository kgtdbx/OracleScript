--to download new Git version for Win64
https://git-scm.com/download/win

--###########--
I've got a project checked locally from github, that remote repo has since had changes made to it. What's the correct command to update my local copy with the latest changes?
--
his should work for every default repo:
git pull origin master

If your default branch is different than master, you will need to specify the branch name:
git pull origin my_default_branch_name

--
This question is very general and there are a couple of assumptions I'll make to simplify it a bit. We'll assume that you want to update your master branch.

If you haven't made any changes locally, you can use git pull to bring down any new commits and add them to your master.

git pull origin master
If you have made changes, and you want to avoid adding a new merge commit, use git pull --rebase.

git pull --rebase origin master
git pull --rebase will work even if you haven't made changes and is probably your best call.


--####
--Git force pull to overwrite local files
git fetch --all
git reset --hard origin/master
git pull origin master
--####

/*
$ git push origin master fatal: 'origin' does not appear to be a git repository fatal: Could not read from remote repository.
Please make sure you have the correct access rights and the repository exists.
*/

--first of all we need to check "origin" was setting up
git remote -v

-- it shows us all "push/fetch remotes" at our project
/* e.g.
$git remote -v
myOrigin ssh://git@example.com:1234/myRepo.git (fetch)
myOrigin ssh://git@example.com:1234/myRepo.git (push)

*/
--and if "origin" don't present there we could get the error when we entered
git push origin master

--in that case we just can use
$git push myOrigin master

--if you want change or delete URL, we need to delete old and then create new 
$git remote remove myOrigin

--the process of adding "remote"
$git remote add origin ssh://git@example.com:1234/myRepo.git

--then it works as expect
$git push origin master

------------------------------my solution--
--first of all we need to check "origin" was setting up
git remote -v

/*
OracleScript    https://github.com/sbovkush/OracleScript (fetch)
OracleScript    https://github.com/sbovkush/OracleScript (push)
*/
--if empty then
git remote add OracleScript https://github.com/sbovkush/OracleScript

--Git force pull to overwrite local files
git fetch --all
git reset --hard origin/master
git pull OracleScript master
git merge FETCH_HEAD

--or just use GitHub Desktop
/*
In GitHub Desktop, switch to the local branch you want to update by clicking "Current Branch" and selecting the branch from the list.
The Fetch origin button Click "Fetch origin" to update your branch.
The Pull origin button If there are commits on the remote branch, you can pull these by clicking "Pull origin".
*/
Remote ->Fetch from ->OracleScript
Merge->Local Merge->Merge

--or just use Git CMD
cd C:\WORK\OracleScript

--to know the changes
git status

--if there are some new files, you have to add them
git add function_proc_test.sql

--if there a lot of files, this adds all the files to the initialialized git repository
git add * 

--or
git add --all 

--add folder with all files  "git add --all folder/"
git add --all utl_call_stack/



/*
usage: git checkout [<options>] <branch>
   or: git checkout [<options>] [<branch>] -- <file>...

    -q, --quiet           suppress progress reporting
    -b <branch>           create and checkout a new branch
    -B <branch>           create/reset and checkout a branch
    -l                    create reflog for new branch
    --detach              detach HEAD at named commit
    -t, --track           set upstream info for new branch
    --orphan <new-branch>
                          new unparented branch
    -2, --ours            checkout our version for unmerged files
    -3, --theirs          checkout their version for unmerged files
    -f, --force           force checkout (throw away local modifications)
    -m, --merge           perform a 3-way merge with the new branch
    --overwrite-ignore    update ignored files (default)
    --conflict <style>    conflict style (merge or diff3)
    -p, --patch           select hunks interactively
    --ignore-skip-worktree-bits
                          do not limit pathspecs to sparse entries only
    --ignore-other-worktrees
                          do not check if another worktree is holding the given ref
    --recurse-submodules[=<checkout>]
                          control recursive updating of submodules
    --progress            force progress reporting

*/


git checkout --m git_main_command.txt

--then do commit

/*
To commit changes (added before) we use following command

git commit -m "commit message"
To commit changes and automatically add modified files (doesn't add new files)

git commit -am "commit message"
*/

git commit -am "update from IS 20180810"

--pull the changes from remote repo
git pull OracleScript master

--to push new/changed files from local to remote repo
git push OracleScript master


--if error then
git pull OracleScript master
git merge FETCH_HEAD

--######################################--
Create a new repository on GitHub. To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub.
Open Git Bash.

Change the current working directory to your local project.

Initialize the local directory as a Git repository.
git init

Add the files in your new local repository. This stages them for the first commit.
git add .
# Adds the files in the local repository and stages them for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'.

Commit the files that you've staged in your local repository.
git commit -m "First commit"
# Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again.

Copy remote repository URL fieldAt the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.
In the Command prompt, add the URL for the remote repository where your local repository will be pushed.
git remote add origin remote repository URL
# Sets the new remote

git remote -v
# Verifies the new remote URL

Push the changes in your local repository to GitHub.
git push origin master
# Pushes the changes in your local repository up to the remote repository you specified as the origin

--######################################--
You can add files using git add, example git add README, git add <folder>/*, or even git add *

Then use git commit -m "<Message>" to commit files

Finally git push -u origin master to push files.

When you make modifications run git status which gives you the list of files modified, add them using git add * for everything or you can specify each file individually, then git commit -m <message> and finally, git push -u origin master

Example - say you created a file README, running git status gives you

$ git status
# On branch master
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#   README
Run git add README, the files are staged for committing. Then run git status again, it should give you - the files have been added and ready for committing.

$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#   new file:   README
#

nothing added to commit but untracked files present (use "git add" to track)
Then run git commit -m 'Added README'

$ git commit -m 'Added README'
[master 6402a2e] Added README
  0 files changed, 0 insertions(+), 0 deletions(-)
  create mode 100644 README
Finally, git push -u origin master to push the remote branch master for the repository origin.

$ git push -u origin master
Counting objects: 4, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 267 bytes, done.
Total 3 (delta 1), reused 0 (delta 0)
To xxx@xxx.com:xxx/xxx.git
   292c57a..6402a2e  master -> master
Branch master set up to track remote branch master from origin.
The files have been pushed successfully to the remote repository.

Running a git pull origin master to ensure you have absorbed any upstream changes

$ git pull origin master
remote: Counting objects: 12, done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 8 (delta 4), reused 7 (delta 3)
Unpacking objects: 100% (8/8), done.
From xxx.com:xxx/xxx
 * branch            master     -> FETCH_HEAD
Updating e0ef362..6402a2e
Fast-forward
 public/javascript/xxx.js |    5 ++---
 1 files changed, 2 insertions(+), 3 deletions(-)
 create mode 100644 README
If you do not want to merge the upstream changes with your local repository, run git fetch to fetch the changes and then git merge to merge the changes. git pull is just a combination of fetch and merge.

I have personally used gitimmersion - http://gitimmersion.com/ to get upto curve on git, its a step-by-step guide, if you need some documentation and help

shareimprove this answer
edited Mar 31 '17 at 19:38

Iron Fist
8,32421028
answered Jan 8 '12 at 6:37

First Zero
12.8k53542
1
gitimmersion.com is fantastic, thanks. – Azoreo Aug 16 '13 at 18:02
7
git add --all folder/ worked better for me than me than git add folder/* – Alex Jul 23 '14 at 


if you want add folder to existing repo ..then add folder to local project code

git rm --cached ./folderName
git add ./folderName
after that

git status
git commit -m "your commit"
git push -u origin master