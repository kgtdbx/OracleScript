ops$tkyte%ORA11GR2> create function test
  2  return varchar2
  3  as
  4  v_string varchar2(32767 byte);
  5  v_num number;
  6  begin
  7  v_string := 'somelongstring';
  8  v_num := 1;
  9  v_num := 2;
 10   v_num := 3;
 11   return v_string;
 12   end;
 13  /

Function created.

ops$tkyte%ORA11GR2> 
ops$tkyte%ORA11GR2> select test() from dual;

TEST()
-------------------------------------------------------------------------------
somelongstring

-------


CREATE OR REPLACE FUNCTION LIVE.getlong (v_table_name IN varchar2, v_col_name IN varchar2, v_rowid IN ROWID
)
   RETURN VARCHAR2
AS
   v_cursor     INTEGER DEFAULT DBMS_SQL.open_cursor ;
   v_number          NUMBER;
   v_long_val   VARCHAR2 (4000);
   v_long_len   NUMBER;
   v_buflen     NUMBER := 4000;
   v_curpos     NUMBER := 0;
BEGIN
   DBMS_SQL.parse (v_cursor, 'select ' || v_col_name || ' from ' || v_table_name || ' where rowid = :x', DBMS_SQL.native );
   DBMS_SQL.bind_variable (v_cursor, ':x', v_rowid);

   DBMS_SQL.define_column_long (v_cursor, 1);
   v_number   := DBMS_SQL.execute (v_cursor);

   IF (DBMS_SQL.fetch_rows (v_cursor) > 0)
   THEN
      DBMS_SQL.column_value_long (v_cursor, 1, v_buflen, v_curpos, v_long_val, v_long_len
      );
   END IF;

   DBMS_SQL.close_cursor (v_cursor);
   RETURN v_long_val;
END getlong;
/



-------


where on this posting did it look like that would work? All through this posting we see how difficult it can be to deal with a long and that if you wanted to expose it that way - you would need to write a plsql function... 

no where on this page do you see me "select substr( LONG_COLUMN, ... )", that doesn't work. 

ops$tkyte%ORA11GR2> create or replace function get_col_default
  2  (
  3  p_owner in all_tab_cols.owner%type,
  4  p_table_name in all_tab_cols.table_name%type,
  5  p_column_name in all_tab_cols.column_name%type
  6  )
  7  return varchar2
  8  as
  9          l_data_default LONG;
 10  begin
 11          select data_default into l_data_default
 12            from all_tab_cols
 13           where owner = p_owner
 14             and table_name = p_table_name
 15             and column_name = p_column_name;
 16  
 17          return substr( l_data_default, 1, 4000 );
 18  end;
 19  /

Function created.

ops$tkyte%ORA11GR2> 
ops$tkyte%ORA11GR2> column d format a20
ops$tkyte%ORA11GR2> select owner, table_name, column_name, get_col_default( owner, table_name, column_name ) d
  2    from all_tab_cols
  3   where get_col_default( owner, table_name, column_name ) is not null
  4     and rownum <= 5
  5  /

OWNER                          TABLE_NAME                     COLUMN_NAME                    D
------------------------------ ------------------------------ ------------------------------ --------------------
SYS                            HS$_PARALLEL_METADATA          PARALLEL                       'Y'
SYS                            HS$_PARALLEL_METADATA          PARALLEL_DEGREE                4
SYS                            HS$_PARALLEL_METADATA          RANGE_PARTITIONED              'N'
SYS                            HS$_PARALLEL_METADATA          SAMPLED                        'N'
SYS                            HS$_PARALLEL_METADATA          HISTOGRAM                      'N'

------

this will be hugely inefficient for hundreds or thousands of rows, but: 



ops$tkyte%ORA9IR2> create table t ( x int, y long );

Table created.

ops$tkyte%ORA9IR2>
ops$tkyte%ORA9IR2> declare
  2          l_max number := 0;
  3  begin
  4          for c in (select rownum r, text from all_views)
  5          loop
  6                  insert into t values ( c.r, c.text );
  7                  l_max := greatest( l_max, length(c.text) );
  8          end loop;
  9          dbms_output.put_line( 'max length = ' || l_max );
 10  end;
 11  /
max length = 14981

PL/SQL procedure successfully completed.

ops$tkyte%ORA9IR2>
ops$tkyte%ORA9IR2>
ops$tkyte%ORA9IR2> create global temporary table gtt ( lob clob ) on commit delete rows;

Table created.

ops$tkyte%ORA9IR2>
ops$tkyte%ORA9IR2> create or replace function get_and_search_long
  2  ( p_tname in varchar2,
  3    p_cname in varchar2,
  4    p_rowid in rowid,
  5    p_search_str in varchar2 default NULL ) return varchar2
  6  as
  7          pragma autonomous_transaction;
  8          l_return varchar2(4000);
  9  begin
 10          execute immediate '
 11          insert into gtt
 12          select to_lob(' || dbms_assert.simple_sql_name( p_cname ) || ')
 13            from ' || dbms_assert.sql_object_name( p_tname ) || '
 14           where rowid = :p_rowid' using p_rowid;
 15
 16          begin
 17                  select substr( lob, 1, 4000 )
 18                    into l_return
 19                from gtt
 20               where lob like p_search_str
 21                      or p_search_str is null;
 22          exception
 23          when no_data_found
 24          then
 25                  null;
 26          end;
 27          commit;
 28          return l_return;
 29  end;
 30  /

Function created.

ops$tkyte%ORA9IR2>
ops$tkyte%ORA9IR2> select *
  2    from (
  3  select x, get_and_search_long( 't', 'y', t.rowid, '%ZZ%' ) str
  4    from t
  5         )
  6   where str is not null
  7  /

         X
----------
STR
-------------------------------------------------------------------------------
      1118
select "INST_ID","RECID","STAMP","NAME","TAG","FILE#","RFILE#","CREATION_CHANGE
#","CREATION_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","INCREMENTAL_LEVEL","CH
ECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHANGE#","RECOVERY_FUZZY_CH
ANGE#","RECOVERY_FUZZY_TIME","ONLINE_FUZZY","BACKUP_FUZZY","MARKED_CORRUPT","ME
DIA_CORRUPT","LOGICALLY_CORRUPT","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","
DELETED","STATUS","COMPLETION_TIME","CONTROLFILE_TYPE","KEEP","KEEP_UNTIL","KEE
P_OPTIONS","SCANNED" from gv$datafile_copy

      1119
select "INST_ID","FILE#","STATUS","ERROR","FORMAT","RECOVER","FUZZY","CREATION_
CHANGE#","CREATION_TIME","TABLESPACE_NAME","TS#","RFILE#","RESETLOGS_CHANGE#","
RESETLOGS_TIME","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","CHECKPOINT_COUNT","BYTE
S","BLOCKS","NAME" from gv$datafile_header

      1234
select "INST_ID","RECID","STAMP","DEVICE_TYPE","HANDLE","COMMENTS","MEDIA","MED
IA_POOL","TAG","STATUS","DELETED","FILE#","CREATION_CHANGE#","CREATION_TIME","R
ESETLOGS_CHANGE#","RESETLOGS_TIME","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSO
LUTE_FUZZY_CHANGE#","RECOVERY_FUZZY_CHANGE#","RECOVERY_FUZZY_TIME","INCREMENTAL
_LEVEL","ONLINE_FUZZY","BACKUP_FUZZY","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RAN
GE","START_TIME","COMPLETION_TIME","ELAPSED_SECONDS","CONTROLFILE_TYPE","KEEP",
"KEEP_UNTIL","KEEP_OPTIONS" from gv$proxy_datafile

      1092
select "INST_ID","RECID","STAMP","SET_STAMP","SET_COUNT","FILE#","CREATION_CHAN
GE#","CREATION_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","INCREMENTAL_LEVEL","
INCREMENTAL_CHANGE#","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHA
NGE#","MARKED_CORRUPT","MEDIA_CORRUPT","LOGICALLY_CORRUPT","DATAFILE_BLOCKS","B
LOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","COMPLETION_TIME","CONTROLFILE_TYPE"
 from gv$backup_datafile

      1827
select "RECID","STAMP","SET_STAMP","SET_COUNT","FILE#","CREATION_CHANGE#","CREA
TION_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","INCREMENTAL_LEVEL","INCREMENTA
L_CHANGE#","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHANGE#","MAR
KED_CORRUPT","MEDIA_CORRUPT","LOGICALLY_CORRUPT","DATAFILE_BLOCKS","BLOCKS","BL
OCK_SIZE","OLDEST_OFFLINE_RANGE","COMPLETION_TIME","CONTROLFILE_TYPE" from v$ba
ckup_datafile

      1853
select "RECID","STAMP","NAME","TAG","FILE#","RFILE#","CREATION_CHANGE#","CREATI
ON_TIME","RESETLOGS_CHANGE#","RESETLOGS_TIME","INCREMENTAL_LEVEL","CHECKPOINT_C
HANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY_CHANGE#","RECOVERY_FUZZY_CHANGE#","RE
COVERY_FUZZY_TIME","ONLINE_FUZZY","BACKUP_FUZZY","MARKED_CORRUPT","MEDIA_CORRUP
T","LOGICALLY_CORRUPT","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","DELETED","
STATUS","COMPLETION_TIME","CONTROLFILE_TYPE","KEEP","KEEP_UNTIL","KEEP_OPTIONS"
,"SCANNED" from v$datafile_copy

      1854
select "FILE#","STATUS","ERROR","FORMAT","RECOVER","FUZZY","CREATION_CHANGE#","
CREATION_TIME","TABLESPACE_NAME","TS#","RFILE#","RESETLOGS_CHANGE#","RESETLOGS_
TIME","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","CHECKPOINT_COUNT","BYTES","BLOCKS
","NAME" from v$datafile_header

      1972
select "RECID","STAMP","DEVICE_TYPE","HANDLE","COMMENTS","MEDIA","MEDIA_POOL","
TAG","STATUS","DELETED","FILE#","CREATION_CHANGE#","CREATION_TIME","RESETLOGS_C
HANGE#","RESETLOGS_TIME","CHECKPOINT_CHANGE#","CHECKPOINT_TIME","ABSOLUTE_FUZZY
_CHANGE#","RECOVERY_FUZZY_CHANGE#","RECOVERY_FUZZY_TIME","INCREMENTAL_LEVEL","O
NLINE_FUZZY","BACKUP_FUZZY","BLOCKS","BLOCK_SIZE","OLDEST_OFFLINE_RANGE","START
_TIME","COMPLETION_TIME","ELAPSED_SECONDS","CONTROLFILE_TYPE","KEEP","KEEP_UNTI
L","KEEP_OPTIONS" from v$proxy_datafile


8 rows selected.

ops$tkyte%ORA9IR2>
ops$tkyte%ORA9IR2> select x, get_and_search_long( 't', 'y', t.rowid ) from t where rownum = 1;

         X
----------
GET_AND_SEARCH_LONG('T','Y',T.ROWID)
-------------------------------------------------------------------------------
         1
select OWNER, TABLE_NAME, TABLESPACE_NAME, CLUSTER_NAME, IOT_NAME,
     PCT_FREE, PCT_USED,
     INI_TRANS, MAX_TRANS,
     INITIAL_EXTENT, NEXT_EXTENT,
     MIN_EXTENTS, MAX_EXTENTS, PCT_INCREASE,
     FREELISTS, FREELIST_GROUPS, LOGGING,
     BACKED_UP, NUM_ROWS, BLOCKS, EMPTY_BLOCKS,
     AVG_SPACE, CHAIN_CNT, AVG_ROW_LEN,
     AVG_SPACE_FREELIST_BLOCKS, NUM_FREELIST_BLOCKS,
     DEGREE, INSTANCES, CACHE, TABLE_LOCK,
     SAMPLE_SIZE, LAST_ANALYZED, PARTITIONED,
     IOT_TYPE, NULL, NULL, NULL, TEMPORARY, SECONDARY, NESTED,
     BUFFER_POOL, ROW_MOVEMENT,
     GLOBAL_STATS, USER_STATS, DURATION, SKIP_CORRUPT, MONITORING,
     CLUSTER_OWNER, DEPENDENCIES, COMPRESSION
from all_tables
union all
select OWNER, TABLE_NAME, TABLESPACE_NAME, CLUSTER_NAME, IOT_NAME,
     PCT_FREE, PCT_USED,
     INI_TRANS, MAX_TRANS,
     INITIAL_EXTENT, NEXT_EXTENT,
     MIN_EXTENTS, MAX_EXTENTS, PCT_INCREASE,
     FREELISTS, FREELIST_GROUPS, LOGGING,
     BACKED_UP, NUM_ROWS, BLOCKS, EMPTY_BLOCKS,
     AVG_SPACE, CHAIN_CNT, AVG_ROW_LEN,
     AVG_SPACE_FREELIST_BLOCKS, NUM_FREELIST_BLOCKS,
     DEGREE, INSTANCES, CACHE, TABLE_LOCK,
     SAMPLE_SIZE, LAST_ANALYZED, PARTITIONED,
     IOT_TYPE, OBJECT_ID_TYPE,
     TABLE_TYPE_OWNER, TABLE_TYPE, TEMPORARY, SECONDARY, NESTED,
     BUFFER_POOL, ROW_MOVEMENT,
     GLOBAL_STATS, USER_STATS, DURATION, SKIP_CORRUPT, MONITORING,
     CLUSTER_OWNER, DEPENDENCIES, COMPRESSION
from all_object_tables


1 row selected.





If you pass null for the search string, it just returns the data found. If you pass a search string, it'll return NULL if there is no match or the first bit of the string otherwise.
------

create or replace function f_column_expression
( p_table_name IN VARCHAR2, p_index_name IN VARCHAR2 )
return varchar2
as
  l_long LONG;
begin
   SELECT column_expression into l_long
     FROM user_ind_expressions
    WHERE table_name = p_table_name
      AND index_name = p_index_name
   ;
   return substr( l_long, 1, 4000 );
end;
/
select table_Name, index_name
     , f_column_expression(table_name, index_name) exprsn
from user_ind_expressions
/
------
you have to take the "primary key" of user_tab_columns and pass that into the routine, that routine fetches a long (as long as it is 32k or less!!!) and can return the substr. 


ops$tkyte%ORA10GR2> create or replace
  2  function get_data_default
  3  ( p_tname in user_tab_columns.table_name%type,
  4    p_cname in user_tab_columns.column_name%type
  5  ) return varchar2
  6  is
  7      l_long long;
  8  begin
  9      select data_default into l_long
 10        from user_tab_columns
 11       where table_name = p_tname
 12         and column_name = p_cname;
 13
 14          if ( l_long is not null )
 15          then
 16          return 'Default ' || substr( l_long, 1, 3000 );
 17          else
 18                  return null;
 19          end if;
 20  end;
 21  /

Function created.

ops$tkyte%ORA10GR2>
ops$tkyte%ORA10GR2> create table t ( x int default 5, y varchar2(10), z date default sysdate );

Table created.

ops$tkyte%ORA10GR2> select table_name,
  2         column_name,
  3             get_data_default( table_name, column_name ) d_default
  4    from user_tab_columns
  5   where table_name = 'T'
  6  /

TABLE_NAME COLUMN_NAM D_DEFAULT
---------- ---------- ---------------
T          X          Default 5
T          Y
T          Z          Default sysdate

---
ops$tkyte@ORA920LAP> create or replace function get_search_condition( p_cons_name in varchar2 ) return varchar2
  2  authid current_user
  3  is
  4      l_search_condition user_constraints.search_condition%type;
  5  begin
  6      select search_condition into l_search_condition
  7        from user_constraints
  8       where constraint_name = p_cons_name;
  9
 10      return l_search_condition;
 11  end;
 12  /

Function created.

ops$tkyte@ORA920LAP>
ops$tkyte@ORA920LAP> select constraint_name
  2    from user_constraints
  3   where get_search_condition(constraint_name) like '%NOT NULL%';

CONSTRAINT_NAME
------------------------------
SYS_C004792

---

SYSTEM@ppc>   create or replace function get_long(p_tname in varchar2,p_cname in varchar2,
  2                      p_rowid in rowid)
  3    return varchar2
  4    is
  5      l_cursor integer default dbms_sql.open_cursor;
  6      l_n number;
  7      l_long_val varchar2(4000);
  8      l_long_len number;
  9      l_buflen number := 4000;
 10      l_curpos number := 0;
 11    begin
 12      dbms_sql.parse( l_cursor,
 13                     'select ' || p_cname || ' from ' || p_tname ||
 14                     ' where rowid = :x',
 15                      dbms_sql.native );
 16      dbms_sql.bind_variable(l_cursor,':x',p_rowid);
 17  
 18      dbms_sql.define_column_long(l_cursor,1);
 19      l_n := dbms_sql.execute(l_cursor);
 20  
 21      if (dbms_sql.fetch_rows(l_cursor) > 0)
 22      then
 23         dbms_sql.column_value_long(l_cursor,1,l_buflen,l_curpos ,
 24                                    l_long_val,l_long_len);
 25     end if;
 26  
 27     dbms_sql.close_cursor(l_cursor);
 28     return l_long_val;
 29    end;
 30  /

Function created.

SYSTEM@ppc> desc master.tt;
 Name                                                  Null?    Type
 ----------------------------------------------------- -------- ------------------------------------
 X                                                              LONG

SYSTEM@ppc> desc master.tt@orcl6;
 Name                                                  Null?    Type
 ----------------------------------------------------- -------- ------------------------------------
 X                                                              LONG

SYSTEM@ppc> select get_long('master.tt','x',rowid) from master.tt;

GET_LONG('MASTER.TT','X',ROWID)
----------------------------------------------------------------------------------------------------
AAAAAAAAAAAAAAAAAAAAAAAAAaaaaaaaa



--####################################################################--
Here is an excerpt from the book I'm working on now that deals with this question:

<quote>

A question that arises frequently however is - what about the data dictionary in Oracle?  It is littered with LONG columns and this makes using them (the dictionary columns) problematic.  For example, to find all VIEWS that contain the text 'HELLO' is not possible:

ops$tkyte@ORA10G> select *
  2  from all_views
  3  where text like '%HELLO%';
where text like '%HELLO%'
      *
ERROR at line 3:
ORA-00932: inconsistent datatypes: expected NUMBER got LONG

This is not limited to just the ALL_VIEWS view, there are many views:

ops$tkyte@ORA10G> select table_name, column_name
  2  from dba_tab_columns
  3  where data_type in ( 'LONG', 'LONG RAW' )
  4  and owner = 'SYS'
  5  and table_name like 'DBA%';
 
TABLE_NAME                     COLUMN_NAME
------------------------------ ------------------------------
DBA_VIEWS                      TEXT
DBA_TRIGGERS                   TRIGGER_BODY
DBA_TAB_SUBPARTITIONS          HIGH_VALUE
DBA_TAB_PARTITIONS             HIGH_VALUE
DBA_TAB_COLUMNS                DATA_DEFAULT
DBA_TAB_COLS                   DATA_DEFAULT
DBA_SUMMARY_AGGREGATES         MEASURE
DBA_SUMMARIES                  QUERY
DBA_SUBPARTITION_TEMPLATES     HIGH_BOUND
DBA_SQLTUNE_PLANS              OTHER
DBA_SNAPSHOTS                  QUERY
DBA_REGISTERED_SNAPSHOTS       QUERY_TXT
DBA_REGISTERED_MVIEWS          QUERY_TXT
DBA_OUTLINES                   SQL_TEXT
DBA_NESTED_TABLE_COLS          DATA_DEFAULT
DBA_MVIEW_ANALYSIS             QUERY
DBA_MVIEW_AGGREGATES           MEASURE
DBA_MVIEWS                     QUERY
DBA_IND_SUBPARTITIONS          HIGH_VALUE
DBA_IND_PARTITIONS             HIGH_VALUE
DBA_IND_EXPRESSIONS            COLUMN_EXPRESSION
DBA_CONSTRAINTS                SEARCH_CONDITION
DBA_CLUSTER_HASH_EXPRESSIONS   HASH_EXPRESSION
 
23 rows selected.

that are affected by this.  So, what is the solution?  If you want to make use of these columns in SQL - we'll need to convert them to a SQL friendly type.  
We can use a user defined function for doing so.  This demonstrates how to accomplish a "long substr" function that will allow you to effectively convert any 4000 bytes of a LONG type into a varchar2, for use with SQL.  
When we are done, we'll be able to query:

ops$tkyte@ORA10G> select *
  2    from (
  3  select owner, view_name,
  4         long_help.substr_of( 'select text
  5                                 from dba_views
  6                                where owner = :owner
  7                                  and view_name = :view_name',
  8                               1, 4000,
  9                               'owner', owner,
 10                               'view_name', view_name ) substr_of_view_text
 11    from dba_views
 12   where owner = user
 13         )
 14   where upper(substr_of_view_text) like '%INNER%'
 15  /

Meaning, we converted the first 4000 bytes of the VIEW_TEXT column from LONG to a VARCHAR2 and can now use a predicate on it.  Using the same technique, you would be able to implement your own instr, like and such for LONG types as well.  In this book, I'll only be demonstrating how to get the substring of a LONG type.

The package we will implement has the following specification:

ops$tkyte@ORA10G> create or replace package long_help
  2  authid current_user
  3  as
  4      function substr_of
  5      ( p_query in varchar2,
  6        p_from  in number,
  7        p_for   in number,
  8        p_name1 in varchar2 default NULL,
  9        p_bind1 in varchar2 default NULL,
 10        p_name2 in varchar2 default NULL,
 11        p_bind2 in varchar2 default NULL,
 12        p_name3 in varchar2 default NULL,
 13        p_bind3 in varchar2 default NULL,
 14        p_name4 in varchar2 default NULL,
 15        p_bind4 in varchar2 default NULL )
 16      return varchar2;
 17  end;
 18  /
Package created.

Note that one line 2, we've specified AUTHID CURRENT_USER.  This makes the package run as the invoker, with all roles and grants in place.  This is important for two reasons.  Firstly, we'd like the database security to no be subverted - this package will only return substrings of columns you (the invoker) is allowed to see.  Secondly, we'd like to install this package once in the database and have its functionality available for all to use - using invokers rights allows us to do that.  If we used the default security model of PLSQL, definer rights, the package would run with the privileges of the owner of the package.  Meaning it would only be able to see data the owner of the package could see - which does not include the set of data the invoker is allowed to see.

The concept behind the function SUBSTR_OF is to take a query that selects at most one row and one column - the LONG value we are interested in.  SUBSTR_OF will parse that query if needed, bind any inputs to it and fetch the results programmatically, returning the necessary piece of the LONG value.
The package body, the implementation, begins with two global variables.  The G_CURSOR variable holds a persistent cursor open for the duration of our session.  This is to avoid having to repeatedly open and close the cursor and to avoid parsing SQL more than we need to.  The second global variable, G_QUERY, is used to remember the text of the last SQL query we've parsed in this package.  As long as the query remains constant, we'll just parse it once.  So, even if we query 5,000 rows in a query - as long as the SQL query we pass to this function doesn't change, we'll only have one parse call:

ops$tkyte@ORA10G> create or replace package body long_help
  2  as
  3
  4      g_cursor number := dbms_sql.open_cursor;
  5      g_query  varchar2(32765);
  6

Next in this package is a private  function, BIND_VARIABLE, that we'll use to bind inputs passed to us by the caller.  We implemented this as a separate private procedure only to make life easier - we want to bind only when the input name is NOT NULL.  Rather than perform that check 4 times in the code for each input parameter - we do it once in this procedure:

  7  procedure bind_variable( p_name in varchar2, p_value in varchar2 )
  8  is
  9  begin
 10      if ( p_name is not null )
 11      then
 12          dbms_sql.bind_variable( g_cursor, p_name, p_value );
 13      end if;
 14  end;
 15

Next is the actual implementation of SUBSTR_OF in the package body, it begins with function declaration from the package specification and the declaration for some local variables.  L_BUFFER will be used to return the value and L_BUFFER_LEN will be used to hold the length returned by an Oracle supplied function:

 16
 17  function substr_of
 18  ( p_query in varchar2,
 19    p_from  in number,
 20    p_for   in number,
 21    p_name1 in varchar2 default NULL,
 22    p_bind1 in varchar2 default NULL,
 23    p_name2 in varchar2 default NULL,
 24    p_bind2 in varchar2 default NULL,
 25    p_name3 in varchar2 default NULL,
 26    p_bind3 in varchar2 default NULL,
 27    p_name4 in varchar2 default NULL,
 28    p_bind4 in varchar2 default NULL )
 29  return varchar2
 30  as
 31      l_buffer       varchar2(4000);
 32      l_buffer_len   number;
 33  begin

Now, the first thing our code does is a sanity check on the P_FROM and P_FOR inputs.  P_FROM must be a number greater than or equal to 1 and P_FOR must be between 1 and 4000 - just like the built-in function SUBSTR:

 34      if ( nvl(p_from,0) <= 0 )
 35      then
 36          raise_application_error
 37          (-20002, 'From must be >= 1 (positive numbers)' );
 38      end if;
 39      if ( nvl(p_for,0) not between 1 and 4000 )
 40      then
 41          raise_application_error
 42          (-20003, 'For must be between 1 and 4000' );
 43      end if;
 44

Next, we'll check to see if we are getting a new query that needs to be parsed.  If the last query we parsed is the same as the current query - we can skip this step.  It is very important to note that on line 47 we are verifying that the P_QUERY passed to us is just a SELECT - we will use this package only to execute SQL SELECT statements, this check validates that for us:

 45      if ( p_query <> g_query or g_query is NULL )
 46      then
 47          if ( upper(trim(nvl(p_query,'x'))) not like 'SELECT%')
 48          then
 49              raise_application_error
 50              (-20001, 'This must be a select only' );
 51          end if;
 52          dbms_sql.parse( g_cursor, p_query, dbms_sql.native );
 53          g_query := p_query;
 54      end if;

Now we are ready to bind the inputs to this query.  Any non-NULL names that were passed to us will be "bound" to the query so when we execute it, it finds the right row:

 55      bind_variable( p_name1, p_bind1 );
 56      bind_variable( p_name2, p_bind2 );
 57      bind_variable( p_name3, p_bind3 );
 58      bind_variable( p_name4, p_bind4 );
 59

And now we are ready to execute the query and fetch the row.  Then using DBMS_SQL.COLUMN_VALUE_LONG, we extract the necessary substring of the long and return it:

 60      dbms_sql.define_column_long(g_cursor, 1);
 61      if (dbms_sql.execute_and_fetch(g_cursor)>0)
 62      then
 63          dbms_sql.column_value_long
 64          (g_cursor, 1, p_for, p_from-1,
 65           l_buffer, l_buffer_len );
 66      end if;
 67      return l_buffer;
 68  end substr_of;
 69
 70  end;
 71  / 
Package body created.

And that is it, you should be able to use that package against any legacy LONG column in your database, allowing you to perform many "where clause" operations that were not possible before, for example, to find all partitions in your schema such that the HIGH_VALUE has the year 2003 in it:

ops$tkyte@ORA10G> select *
  2    from (
  3  select table_owner, table_name, partition_name,
  4         long_help.substr_of
  5         ( 'select high_value
  6              from all_tab_partitions
  7             where table_owner = :o
  8               and table_name = :n
  9               and partition_name = :p',
 10            1, 4000,
 11            'o', table_owner,
 12            'n', table_name,
 13            'p', partition_name ) high_value
 14    from all_tab_partitions
 15   where table_name = 'T'
 16     and table_owner = user
 17         )
 18   where high_value like '%2003%'
 19  /
 
TABLE_OWN TABLE PARTIT HIGH_VALUE
--------- ----- ------ ------------------------------
OPS$TKYTE T     PART1  TO_DATE(' 2003-03-13 00:00:00'
                       , 'SYYYY-MM-DD HH24:MI:SS', 'N
                       LS_CALENDAR=GREGORIAN')
 
OPS$TKYTE T     PART2  TO_DATE(' 2003-03-14 00:00:00'
                       , 'SYYYY-MM-DD HH24:MI:SS', 'N
                       LS_CALENDAR=GREGORIAN')

Using this same technique - that of processing the result of a query that returns a single row with a single LONG column in a function - you can implement your own INSTR, LIKE and so on as needed.  

This implementation works well on the LONG type but will not work on LONG RAW types.  LONG RAWs are not piecewise accessible (there is no COLUMN_VALUE_LONG_RAW function in DBMS_SQL).  Fortunately, this is not too serious of a restriction since LONG RAWs are not used in the dictionary and the need to "substring" so you can search on it is rare.  If you do have a need to do so however, you will not be using PLSQL unless the LONG RAW is 32k or less, there is simply no method for dealing with LONG RAWS over 32k in PLSQL itself.  Java, C, C++, Visual Basic or some other language would have to be used.
Another approach would be to temporarily convert the LONG or LONG RAW into a CLOB or BLOB using the TO_LOB built in function and a global temporary table.  Your PLSQL procedure could:

Insert into global_temp_table ( blob_column ) 
select to_lob(long_raw_column) from t where

This would work well in an application that occasionally needed to work with a single LONG RAW value - you would not want to be continuously doing that however due to the amount of work involved.  If you find yourself needing to resort to this technique frequently, you would definitely convert the LONG RAW to a BLOB once and be done with it.
</quote> 


-----------------------------------------------------------------------------------------------------------
create or replace package long_help
authid current_user
as
    function substr_of
    ( p_query in varchar2,
      p_from  in number,
      p_for   in number,
      p_name1 in varchar2 default NULL,
      p_bind1 in varchar2 default NULL,
      p_name2 in varchar2 default NULL,
      p_bind2 in varchar2 default NULL,
      p_name3 in varchar2 default NULL,
      p_bind3 in varchar2 default NULL,
      p_name4 in varchar2 default NULL,
      p_bind4 in varchar2 default NULL )
    return varchar2;
end;
/


create or replace package body long_help
 as

     g_cursor number := dbms_sql.open_cursor;
     g_query  varchar2(32765);

procedure bind_variable( p_name in varchar2, p_value in varchar2 )
 is
 begin
     if ( p_name is not null )
     then
         dbms_sql.bind_variable( g_cursor, p_name, p_value );
     end if;
 end;

function substr_of
 ( p_query in varchar2,
   p_from  in number,
   p_for   in number,
   p_name1 in varchar2 default NULL,
   p_bind1 in varchar2 default NULL,
   p_name2 in varchar2 default NULL,
   p_bind2 in varchar2 default NULL,
   p_name3 in varchar2 default NULL,
   p_bind3 in varchar2 default NULL,
   p_name4 in varchar2 default NULL,
   p_bind4 in varchar2 default NULL )
 return varchar2
 as
     l_buffer       varchar2(4000);
     l_buffer_len   number;
 begin
     if ( nvl(p_from,0) <= 0 )
     then
         raise_application_error
         (-20002, 'From must be >= 1 (positive numbers)' );
     end if;
     if ( nvl(p_for,0) not between 1 and 4000 )
     then
         raise_application_error
         (-20003, 'For must be between 1 and 4000' );
     end if;
    if ( p_query <> g_query or g_query is NULL )
     then
         if ( upper(trim(nvl(p_query,'x'))) not like 'SELECT%')
         then
             raise_application_error
             (-20001, 'This must be a select only' );
         end if;
         dbms_sql.parse( g_cursor, p_query, dbms_sql.native );
         g_query := p_query;
     end if;
     bind_variable( p_name1, p_bind1 );
     bind_variable( p_name2, p_bind2 );
     bind_variable( p_name3, p_bind3 );
     bind_variable( p_name4, p_bind4 );
     dbms_sql.define_column_long(g_cursor, 1);
     if (dbms_sql.execute_and_fetch(g_cursor)>0)
     then
         dbms_sql.column_value_long
         (g_cursor, 1, p_for, p_from-1,
          l_buffer, l_buffer_len );
     end if;
     return l_buffer;
 end substr_of;

 end;
 / 
-------------------
select *
  from (
select owner, view_name,
       long_help.substr_of( 'select text
                               from dba_views
                              where owner = :owner
                                and view_name = :view_name',
                             1, 4000,
                             'owner', owner,
                             'view_name', view_name ) substr_of_view_text
  from dba_views
 where owner = 'KVASIR'
       )
 where upper(substr_of_view_text) like '%STRUTUR%'
/
