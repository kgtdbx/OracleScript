select to_CHAR(sysdate,'DD MONTH YYYY','nls_date_language=russian')from dual;

select to_CHAR(to_date('01-12-2016','dd-mm-yyyy'),'DD MON YYYY','nls_date_language=american')from dual;

-----поиск чисел в строке---
select '2003'

  , decode(

    length(trim(translate('2003', '1234567890', ' '))), 

    null, 'Это чиселка сконвертится'

    , 'Эта-нет'

  )

from dual;

select length(trim(translate('20h03', '1234567890', ' ')))

from dual
------
regexp_like(value,'^[0-9]+$') --числа
regexp_like(value,'^[0-9]+$') --положительные числа
------
Well, OP asked to проверить чтобы строка содержала только цифры. You decided to use regexp - fine. But your regexp checks if text is number. And as Elic pointed out, it checks for fractions only. Anyway, to check for number using regexp:

SET SERVEROUTPUT ON
SET VERIFY OFF
DECLARE
   v_input VARCHAR2(4000) := '&1';
BEGIN
   IF regexp_like(v_input,
                  '^( *)(\+|-)?((\d*[.]?\d+)|(\d+[.]?\d*)){1}(e(\+|-)?\d+)?(f|d)?$','i') THEN
      dbms_output.put_line(v_input || ' is number');
   ELSE
      dbms_output.put_line(v_input || ' is not number');
   END IF;
END;
SQL> /
Enter value for 1:     -7.8E+12
-7.8E+12 is number

PL/SQL procedure successfully completed.

SQL> /
Enter value for 1:     -7.8E+12.5
-7.8E+12.5 is not number

PL/SQL procedure successfully completed.

SQL> /
Enter value for 1: -   5
-   5 is not number

PL/SQL procedure successfully completed.

SQL> /
Enter value for 1:    -5
-5 is number

PL/SQL procedure successfully completed.

SQL> /
Enter value for 1: -6.
-6. is number

PL/SQL procedure successfully completed.

SQL> /
Enter value for 1: +.45
+.45 is number

PL/SQL procedure successfully completed.

SQL> /
Enter value for 1: 1+2
1+2 is not number

PL/SQL procedure successfully completed.

SQL> /
Enter value for 1: Abc
Abc is not number

PL/SQL procedure successfully completed.
------

функции Oracle

    to_char(date [,format[,nlsparams]]) - дату в строку;
    to_char(number [,format[,nlsparams]]) - число в строку;
    to_date(string[,format[,nlsparams]]) - строку в дату;
    to_number( string [ ,format[, nlsparams] ]) - строку в число;
    to_timestamp(string, format) - строку во время.

В этих функциях format описание формата даты или числа, а nlsparams - национальные параметры. 

Формат строки для даты задается следующими элементами:

    "" - вставляет указанный в ковычках текст;
    AD, A.D. - вставляет AD с точками или без точек;
    ВС, B.C. - вставляет ВС с точками или без точек;
    СС, SCC - вставляет век, SCC возвращает даты ВС как отрицательные числа;
    D - вставляет день недели;
    DAY - вставляет имя дня, дополненное пробелами до длины в девять символов;
    DD - вставляет день месяца;
    DDD - вставляет день года;
    DY1 - вставляет сокращенное название дня;
    FF2 - вставляет доли секунд вне зависимости от системы счисления;
    НН, НН12 - вставляет час дня (от 1 до 12);
    НН24 - вставляет час дня (от 0 до 23);
    MI - вставляет минуты;
    MM - вставляет номер месяца;
    MON - вставляет сокращенное название месяца;
    MONTH - вставляет название месяца, дополненное пробелами до девяти символов;
    RM - вставляет месяц римскими цифрами;
    RR - вставляет две последние цифры года;
    RRRR - вставляет весь год;
    SS - вставляет секунды;
    SSSSS - вставляет число секунд с полуночи;
    WW - вставляет номер недели года (неделя - 7 дней от первого числа, а не от понедельника до воскресенья);
    W - вставляет номер недели месяца;
    Y.YYY - вставляет год с запятой в указанной позиции;
    YEAR, SYEAR - вставляет год, SYEAR возвращает даты ВС как отрицательные числа;
    YYYY, SYYYY - вставляет год из четырех цифр, SYYYY возвращает даты ВС как отрицательные числа;
    YYY, YY, Y - вставляет соответствующее число последних цифр года.

Формат числовой строки задается следующими элементами:

    $ - вставляет знак доллара перед числом;
    В - вставляет пробелы для целой части десятичного числа, если она равна нулю;
    MI - вставляет знак минус в конце (например, '999.999mi');
    S - вставляет знак числа в начале или в конце (например,'s9999' или '9999s');
    PR - записывает отрицательное число в уголвых скобках (например,'999.999pr');
    D - вставляет разделитель десятичной точки в указанной позиции (например, '999D999');
    G - вставляет групповой разделитель в указанной позиции (например,'9G999G999'). При этом дробная часть числа отбрасывается;
    С - вставляет ISO идентификатор валюты в начале или в конце числа (например, 'с9999' или '9999с');
    L - вставляет локальный символ валюты в в начале или в конце числа (например, 'l9999' или '9999l');
    , - вставляет запятую в указанной позиции вне зависимости от группового разделителя;
    . - вставляет десятичную точку в указанной позиции вне зависимости от разделителя десятичной точки;
    V - возвращает значение, умноженное на 10^n, где n равно числу девяток после V. В случае необходимости это значение округляется;
    ЕЕЕЕ - 9.99ЕЕЕЕ возвращает значение в экспоненциальной форме записи;
    RM - RM значение будет записано римскими цифрами в верхнем регистре;
    rm - rm значение будет записано римскими цифрами в нижнем регистре;
    0 - вставляет нули, вместо пробелов в начале строки или в конце, например, 9990 вставляет нули, вместо пробелов в конце строки;
    9 - каждая 9 определяет значащую цифру.


select to_char(sysdate, 
 '"системное время: "DD-MON-YY hh24.mi:ss CC "век"') 
 as c
   from dual;

select to_date('01012009','ddmmyyyy') as c 
   from dual;

select to_char(-10000,'99G999D99L',
  'NLS_NUMERIC_CHARACTERS = '',.''
   NLS_CURRENCY = ''baks'' ') as c
    from dual;

select to_char(9.12345,'099.99') as c 
    from dual    
